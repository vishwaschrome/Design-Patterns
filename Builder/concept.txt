Intent:
Builder is a creational design pattern that lets you construct complex objects step by step. 
The pattern allows you to produce different types and representations of an object using the same construction code.

Problem:
Imagine a complex object that requires laborious, step-by-step initialization of many fields and nested objects. Such initialization code is usually buried inside a monstrous constructor with lots of parameters. Or even worse: scattered all over the client code.

There are two traditional solutions:
1) Extend the Base class and create a set of subclasses to cover all combinations of the parameters. It increases the number of subclasses. This hierarchy grows even more if we want to add a new parameter.
2) Create a giant constructor in the base with all possible parameters. In most cases, most of the parameters won't be used making the constructor calls pretty ugly.

Best Solution: Use Builder Pattern.
The Builder pattern suggests that you extract the object construction code out of its own class and move it to separate objects called builders.

Applicability:

1) Use the Builder pattern to get rid of a “telescoping constructor”.
2) Use the Builder pattern when you want your code to be able to create different representations of some product.
3) Use the Builder to construct Composite trees or other complex objects.

